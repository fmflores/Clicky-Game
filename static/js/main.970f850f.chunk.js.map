{"version":3,"sources":["components/Nav.js","components/Jumbo.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["navState","className","style","justifyContent","boxShadow","href","msg","score","ts","textAlign","arr","shuffle","map","url","key","maxHeight","onClick","overflowY","src","App","useState","setNavState","imgs","clicked","pics","setPics","Nav","Jumbo","Game","includes","console","log","sort","a","b","Math","random","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAEe,G,MAAA,gBAAEA,EAAF,EAAEA,SAAF,OAAgB,oCAC/B,yBAAKC,UAAU,kDAAkDC,MAAO,CAACC,eAAe,eAAeC,UAAU,eAC/G,uBAAGH,UAAU,eAAeI,KAAK,KAAjC,eACI,0BAAMJ,UAAU,mBACV,4BAAKD,EAASM,MAEpB,0BAAML,UAAU,YACd,uCAAaD,EAASO,MAAtB,kBAA4CP,EAASQ,SCP9C,oBAAK,yBAAKP,UAAU,YAAYC,MAAO,CAACO,UAAU,WAAW,4CAAqB,0GCAlF,cAAmB,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,QAClB,OAAO,oCACND,EAAIE,KAAI,SAAAC,GAAG,OACL,yBAAKZ,UAAU,aAAaa,IAAKD,EAAKX,MAAO,CAACa,UAAU,UAC3D,yBAAKC,QAAS,kBAAML,EAAQE,IAAMZ,UAAU,YAAYC,MAAO,CAACe,UAAU,UAAWC,IAAKL,UCkEnFM,MAlEf,WAAgB,IAAD,EACmBC,mBAAS,CACvCd,IAAK,2BACLC,MAAO,EACPC,GAAI,IAJO,mBACNR,EADM,KACIqB,EADJ,OAMWD,mBAAS,CAC/BE,KAAM,CACJ,yHACA,uFACA,yIACA,sHACA,+DACA,sIACA,+HACA,+EACA,uMACA,sIACA,iHACA,sKAEFC,QAAS,KArBE,mBAMNC,EANM,KAMAC,EANA,KAqDb,OACE,oCACE,kBAACC,EAAD,CAAK1B,SAAUA,IACf,kBAAC2B,EAAD,MACA,yBAAK1B,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC2B,EAAD,CAAMlB,IAAKc,EAAKF,KAAMX,QAxBd,SAACE,GACXW,EAAKD,QAAQM,SAAShB,IAT1BQ,EAAY,CAAEf,IAAK,2BAA4BC,MAAO,EAAGC,GAAIR,EAASQ,KACtEiB,EAAQ,CAAEH,KAAME,EAAKF,KAAMC,QAAS,KAUlCO,QAAQC,IAAI,iBAGZN,EAAQ,CACNH,KAAME,EAAKF,KAAKU,MAAK,SAACC,EAAGC,GAAJ,OAAUC,KAAKC,SAAW,MAC/Cb,QAASC,EAAKD,QAAQc,OAAO,CAACxB,MAGhCb,EAASO,QAAUP,EAASQ,GAC1Ba,EAAY,CAAEd,MAAOP,EAASO,MAAQ,EAAGC,GAAIR,EAASQ,GAAK,IAC3Da,EAAY,CAAEd,MAAOP,EAASO,MAAQ,EAAGC,GAAIR,EAASQ,aC1C1C8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.970f850f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default ({navState}) => <>\r\n<nav className=\"navbar navbar-expand-lg navbar-light bg-success\" style={{justifyContent:\"space-around\",boxShadow:\"0 0 10px 0\"}}>\r\n  <a className=\"navbar-brand\" href=\"/\">CLICKY GAME</a>\r\n      <span className=\"nav-item active\">\r\n            <h4>{navState.msg}</h4>\r\n      </span>\r\n      <span className=\"nav-item\">\r\n        <h4>SCORE : {navState.score} | TOP SCORE : {navState.ts}</h4>\r\n      </span>\r\n    </nav>\r\n</>","import React from \"react\";\r\n\r\nexport default ()=> <div className=\"jumbotron\" style={{textAlign:\"center\"}}><h1>Clicky Game!</h1><h4>Click on an image to earn points, but don't click on any more than once!</h4></div>","import React from \"react\";\r\n\r\nexport default ({arr, shuffle})=>{\r\n    return <>\r\n    {arr.map(url=>\r\n           <div className=\"col-3 mt-2\" key={url} style={{maxHeight:\"150px\"}}>\r\n        <img onClick={() => shuffle(url)} className=\"img-fluid\" style={{overflowY:\"hidden\"}} src={url}/>\r\n    </div>)}\r\n    </>\r\n}","import React, { useState, Component } from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Jumbo from \"./components/Jumbo\";\nimport Game from \"./components/Game\";\nfunction App() {\n  const [navState, setNavState] = useState({\n    msg: \"Click An Image to Begin!\",\n    score: 0,\n    ts: 0,\n  });\n  const [pics, setPics] = useState({\n    imgs: [\n      \"https://img1.looper.com/img/gallery/the-strange-problem-steve-carell-had-while-filming-the-office/intro-1587676724.jpg\",\n      \"https://static.accessonline.com/uploads/2011/04/Steve-Carell-The-Office-Farewell.jpg\",\n      \"https://img2.looper.com/img/gallery/the-funniest-michael-scott-quotes-from-the-office/michael-scott-declares-bankruptcy-1566232193.jpg\",\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQCrRtYglKG50nFdZrLhLNihsLM2_u6CguOGQb-CimbGUdQ63Bw&usqp=CAU\",\n      \"https://miro.medium.com/max/500/1*xDIevNE7HEMiJQVTYg0qDQ.png\",\n      \"https://nofilmschool.com/sites/default/files/styles/article_wide/public/the-office-michael-scott-best-impressions.jpg?itok=pXdFEsto\",\n      \"https://static2.srcdn.com/wordpress/wp-content/uploads/2019/07/Steve-Carell-as-Michael-Scott-In-The-Office-Series-Finale.jpg\",\n      \"https://pbs.twimg.com/profile_images/959108779555074051/PLd8LODr_400x400.jpg\",\n      \"https://static.highsnobiety.com/thumbor/sNzOPq9n__CO9WDo0Fw0SLcHFwc=/fit-in/1200x720/smart/static.highsnobiety.com/wp-content/uploads/2019/12/12123128/the-office-threat-level-midnight-movie-00.jpg\",\n      \"https://img.cinemablend.com/filter:scale/cb/f/6/c/4/a/1/f6c4a130350731b026f260de0931aaab7c53667b4036527988f71cfc9116941e.jpg?mw=600\",\n      \"https://img.cinemablend.com/filter:scale/quill/5/c/e/b/6/4/5ceb6463894fa7418c959d6d70054006a1f16485.jpg?mw=600\",\n      \"https://www.nydailynews.com/resizer/KV3_wa3e99bqG7ZEnhbA9Tv55YI=/415x313/top/arc-anglerfish-arc2-prod-tronc.s3.amazonaws.com/public/GSJUV4ARYC5DVHP4JFICREA2JA.jpg\",\n    ],\n    clicked: [],\n  });\n\n  const reset = () => {\n    //do some resetting.\n    // setNavState({ score: 0 });\n    setNavState({ msg: 'Click An Image to Begin!', score: 0, ts: navState.ts })\n    setPics({ imgs: pics.imgs, clicked: [] });\n\n    // clicked back to 0\n    // top score remains the same \n    \n  };\n\n  const shuffle = (url) => {\n    if (pics.clicked.includes(url)) {\n      reset();\n      console.log('Game reset.')\n    } else {\n      //add 1 to score, 1 to top score if score> top score\n      setPics({\n        imgs: pics.imgs.sort((a, b) => Math.random() - 0.5),\n        clicked: pics.clicked.concat([url]),\n      });\n\n      navState.score === navState.ts ?\n        setNavState({ score: navState.score + 1, ts: navState.ts + 1 }) : \n        setNavState({ score: navState.score + 1, ts: navState.ts });\n\n    }\n  };\n\n  return (\n    <>\n      <Nav navState={navState} />\n      <Jumbo />\n      <div className=\"container\">\n        <div className=\"row\">\n          <Game arr={pics.imgs} shuffle={shuffle} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}